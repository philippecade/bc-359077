/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import org.bouncycastle.cms.CMSException;
import org.bouncycastle.cms.CMSProcessableByteArray;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.cms.CMSSignedDataGenerator;
import org.bouncycastle.cms.SignerInfoGenerator;
import org.bouncycastle.cms.jcajce.JcaSignerInfoGeneratorBuilder;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.operator.ContentSigner;
import org.bouncycastle.operator.OperatorCreationException;
import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;
import org.bouncycastle.operator.jcajce.JcaDigestCalculatorProviderBuilder;

public class Signer {
    private File certFile;

    static {
        Security.addProvider(new BouncyCastleProvider());
    }

    public void setCert(File certFile) {
        this.certFile = certFile;
    }

    public X509Certificate getPublicKey() throws IOException {
        try (InputStream in = new FileInputStream(this.certFile)) {
            KeyStore keystore = KeyStore.getInstance("PKCS12", "BC");
            keystore.load(in, new char[] { 'a', 'm', 'o', 's' });
            return (X509Certificate) keystore.getCertificate("amos.testnew");
        } catch (KeyStoreException | NoSuchProviderException | NoSuchAlgorithmException | CertificateException e) {
            throw new IOException(e.getMessage(), e);
        }
    }

    public PrivateKey getPrivateKey() throws IOException {
        try (InputStream in = new FileInputStream(this.certFile)) {
            KeyStore keystore = KeyStore.getInstance("PKCS12", "BC");
            keystore.load(in, new char[] { 'a', 'm', 'o', 's' });
            return (PrivateKey) keystore.getKey("amos.testnew", null);
        } catch (KeyStoreException | NoSuchProviderException | NoSuchAlgorithmException | CertificateException | UnrecoverableKeyException e) {
            throw new IOException(e.getMessage(), e);
        }
    }

    public byte[] sign(byte[] data) throws IOException {
        try {
            CMSSignedDataGenerator generator = new CMSSignedDataGenerator();
            ContentSigner sha1Signer = new JcaContentSignerBuilder("SHA1withRSA")
                    .setProvider("BC").build(getPrivateKey());
            SignerInfoGenerator signerInfoGenerator = new JcaSignerInfoGeneratorBuilder(
                    new JcaDigestCalculatorProviderBuilder().setProvider("BC").build()).setDirectSignature(true)
                    .build(sha1Signer, getPublicKey());
            generator.addSignerInfoGenerator(signerInfoGenerator);
            CMSSignedData signedData = generator.generate(new CMSProcessableByteArray(data), false);
            return signedData.getEncoded();
        } catch (OperatorCreationException | IOException | CertificateEncodingException | CMSException e) {
            throw new IOException(e.getMessage(), e);
        }
    }

    public static void main(String[] args) {
        System.out.println("Use the unit tests");
    }
}
